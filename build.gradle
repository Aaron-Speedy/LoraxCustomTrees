plugins {
    id 'java'
    id 'com.gradleup.shadow' version '8.3.6'
    id 'xyz.jpenilla.run-paper' version '2.3.1'
}

group = 'org.infotoast'
version = '5.3'

repositories {
    mavenCentral()
    maven {
        name = 'papermc-repo'
        url = 'https://repo.papermc.io/repository/maven-public/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'codemc-repo'
        url = uri('https://repo.codemc.org/repository/maven-public/')
    }
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT'
    implementation 'de.tr7zw:item-nbt-api:2.15.0'
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    toolchain.languageVersion.set(JavaLanguageVersion.of(21))
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

task compressTreeDatapack(type: Zip) {
    from "EasyTrees/"
    include "*"
    include "*/*"
    include "*/*/*"
    include "*/*/*/*"
    include "*/*/*/*/*"
    include "*/*/*/*/*/*"
    archiveFileName = "EasyTrees.zip"
    destinationDirectory = file("src/main/resources/")
}

processResources {
    dependsOn(compressTreeDatapack)
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

tasks {
    runServer {
        minecraftVersion("1.21.4")
    }
}

task cleanTreeDatapack {
    project.delete(file("src/main/resources/EasyTrees.zip"))
}

shadowJar {
    relocate('de.tr7zw.changeme.nbtapi', 'de.tr7zw.lorax.nbtapi')
    /*dependencies {
        include(dependency('de.tr7zw:item-nbt-api:2.12.2'))
    }*/
    destinationDirectory.set(layout.buildDirectory.dir("distributions"))
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

build {
    dependsOn(compressTreeDatapack)
    dependsOn(shadowJar)
}

clean {
    dependsOn(cleanTreeDatapack)
}
